AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Elastic Beanstalk Environment with RDS and Secrets Manager

Resources:
  RDSSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: OneAnotherRDSSecret
      Description: 'Secret for RDS database credentials'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "OneAnotherAdminUser"}'
        GenerateStringKey: 'password'
        ExcludeCharacters: '"@/\$%&*()+=[]{}<>:;'

  RDSInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: your-db-instance
      AllocatedStorage: '20'
      DBInstanceClass: db.t3.micro
      Engine: mysql
      MasterUsername: !Sub '{{resolve:secretsmanager:${RDSSecret}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${RDSSecret}:SecretString:password}}'
      DBName: OneAnotherDb
      VPCSecurityGroups:
        - !GetAtt RDSSecurityGroup.GroupId
      DBSubnetGroupName: !Ref DBSubnetGroup

  RDSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable access to RDS instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0

  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS instance
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  ElasticBeanstalkApplication:
    Type: 'AWS::ElasticBeanstalk::Application'
    Properties:
      ApplicationName: OneAnother

  ElasticBeanstalkApplicationVersion:
    Type: 'AWS::ElasticBeanstalk::ApplicationVersion'
    Properties:
      ApplicationName: !Ref ElasticBeanstalkApplication
      Description: Version 1.0
      SourceBundle:
        S3Bucket: !Ref ElasticBeanstalkS3Bucket
        S3Key: deploy.zip

  ElasticBeanstalkEnvironment:
    Type: 'AWS::ElasticBeanstalk::Environment'
    Properties:
      ApplicationName: !Ref ElasticBeanstalkApplication
      EnvironmentName: Development
      SolutionStackName: '64bit Amazon Linux 2023 v3.3.0 running .NET 9'
      VersionLabel: !Ref ElasticBeanstalkApplicationVersion
      OptionSettings:
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: 'DB_SECRET_ARN'
          Value: !Ref RDSSecret
        - Namespace: 'aws:autoscaling:launchconfiguration'
          OptionName: 'IamInstanceProfile'
          Value: !Ref ElasticBeanstalkInstanceProfile
      Tier:
        Name: WebServer
        Type: Standard
        Version: '1.0'

  ElasticBeanstalkInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref ElasticBeanstalkRole

  ElasticBeanstalkRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ElasticBeanstalkPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds:*
                  - ec2:*
                  - secretsmanager:GetSecretValue
                Resource: '*'

  ElasticBeanstalkS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'elasticbeanstalk-${AWS::StackName}-${AWS::Region}'

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-vpc'

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'

Outputs:
  RDSInstanceEndpoint:
    Description: 'Endpoint of the RDS instance'
    Value: !GetAtt RDSInstance.Endpoint.Address

  ElasticBeanstalkEnvironmentURL:
    Description: 'URL of the Elastic Beanstalk Environment'
    Value: !GetAtt ElasticBeanstalkEnvironment.EndpointURL
